# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: NuGet Publish
on:
  workflow_dispatch: # Allow running the workflow manually from the GitHub UI
  release:
    types:
      - published    # Run the workflow when a new GitHub release is published

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  NUGET_DIR: "${{ github.workspace }}/nuget"
  NUGET_PACKS: "${{ env.NUGET_DIR }}/*.nupkg"
  NUGET_ARTIFACT: nuget_pack

defaults:
  run:
    shell: pwsh

jobs:
  build-and-test:
    uses: ./.github/workflows/build-test.yml

  pack:
    runs-on: ubuntu-latest
    needs: [ build-and-test ]
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0 # Get all history to allow automatic versioning using MinVer

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4

    # Edit commit
    - name: Update git commit id
      run:  ./.github/workflows/set-repository_commit.ps1 -commitHash "${{ github.sha }}" -csProjPath "PowerShellAsync/PowerShellAsync.csproj"

    # Restore nuget packages only once
    - name: Restore
      run: dotnet restore

    # Create the NuGet package in the folder from the environment variable NuGetDirectory
    - run: dotnet pack --no-restore --configuration Release --output "${{ env.NUGET_DIR }}"

    # Publish the NuGet package as an artifact, so they can be used in the following jobs
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ env.NUGET_ARTIFACT }}
        path: ${{ env.NUGET_DIR }}
        if-no-files-found: error

  validate-nuget:
    runs-on: ubuntu-latest
    needs: [ pack ]
    steps:

    # Install the .NET SDK indicated in the global.json file
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
  
    # Download the NuGet package created in the previous job
    - uses: actions/download-artifact@v3
      with:
        name: ${{ env.NUGET_ARTIFACT }}
        path: ${{ env.NUGET_DIR }}

    - name: Install nuget validator
      run: dotnet tool update Meziantou.Framework.NuGetPackageValidation.Tool --global

    # Validate metadata and content of the NuGet package
    # https://www.nuget.org/packages/Meziantou.Framework.NuGetPackageValidation.Tool#readme-body-tab
    # If some rules are not applicable, you can disable them
    # using the --excluded-rules or --excluded-rule-ids option
    - name: Validate nuget package
      run: meziantou.validate-nuget-package --excluded-rule-ids '112, 119' (Get-ChildItem "${{ env.NUGET_PACKS }}")

  publish:
    # Publish only when creating a GitHub Release
    # https://docs.github.com/en/repositories/releasing-projects-on-github/managing-releases-in-a-repository
    # You can update this logic if you want to manage releases differently
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    needs: [ validate-nuget ]
    steps:

      # Download the NuGet package created in the previous job
      - uses: actions/download-artifact@v3
        with:
          name: ${{ env.NUGET_ARTIFACT }}
          path: ${{ env.NUGET_DIR }}

      # Install the .NET SDK indicated in the global.json file
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v4

      # Publish all NuGet packages to NuGet.org
      # Use --skip-duplicate to prevent errors if a package with the same version already exists.
      # If you retry a failed workflow, already published packages will be skipped without error.
      - name: Publish NuGet package
        run: |
          foreach ($file in (Get-ChildItem "${{ env.NUGET_PACKS }}")) {
              dotnet nuget push $file --api-key "${{ secrets.NUGET_APIKEY }}" --source https://api.nuget.org/v3/index.json --skip-duplicate
          }
